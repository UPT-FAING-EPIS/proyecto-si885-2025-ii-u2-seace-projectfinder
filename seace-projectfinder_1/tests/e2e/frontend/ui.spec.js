import { test, expect } from '@playwright/test';

/**
 * Tests para el frontend React
 * Verifica que la interfaz de usuario funcione correctamente
 */

const FRONTEND_URL = 'http://localhost:3000';

test.describe('üé® Frontend UI Tests', () => {
  
  test.beforeEach(async ({ page }) => {
    // Configurar intercepci√≥n de logs del navegador
    page.on('console', msg => {
      if (msg.type() === 'error') {
        console.log('üö® Console Error:', msg.text());
      }
    });
    
    page.on('pageerror', error => {
      console.log('üí• Page Error:', error.message);
    });
  });

  test('üè† Landing Page - Welcome debe cargar correctamente', async ({ page }) => {
    console.log('üîç Navegando a la p√°gina principal...');

    await page.goto(FRONTEND_URL);

    // La aplicaci√≥n actual redirige autom√°ticamente a /login si no est√° autenticado
    await page.waitForURL('**/login');

    // Verificar que estamos en la p√°gina de login
    await expect(page).toHaveURL(/.*\/login/);

    // Verificar que la p√°gina de login cargue correctamente
    await expect(page.locator('h2').filter({ hasText: 'Iniciar Sesi√≥n' })).toBeVisible();

    console.log('‚úÖ Redirecci√≥n autom√°tica a login funciona correctamente');
  });

  test('üîê Login Page - P√°gina de login debe ser accesible', async ({ page }) => {
    console.log('üîç Navegando a la p√°gina de login...');

    await page.goto(`${FRONTEND_URL}/login`);

    // Verificar que la p√°gina de login cargue
    await expect(page.locator('h2').filter({ hasText: 'Iniciar Sesi√≥n' })).toBeVisible();

    // Verificar campos del formulario usando selectores m√°s espec√≠ficos
    await expect(page.locator('input[placeholder*="usuario"], input[name="username"]')).toBeVisible();
    await expect(page.locator('input[type="password"], input[name="password"]')).toBeVisible();

    // Verificar bot√≥n de submit
    await expect(page.locator('button[type="submit"]').filter({ hasText: 'Iniciar Sesi√≥n' })).toBeVisible();

    console.log('‚úÖ P√°gina de login cargada correctamente');
  });

  test('üë§ Register Page - Sistema no tiene registro p√∫blico', async ({ page }) => {
    console.log('üîç Verificando que no existe p√°gina de registro p√∫blica...');

    // Intentar acceder a una ruta de registro que no existe
    await page.goto(`${FRONTEND_URL}/register`);

    // La aplicaci√≥n deber√≠a redirigir a login o mostrar p√°gina 404
    // Verificar que no estamos en una p√°gina de registro funcional
    const hasRegisterForm = await page.locator('input[name="username"], input[name="email"]').count();
    expect(hasRegisterForm).toBe(0);

    console.log('‚úÖ Sistema correctamente no tiene registro p√∫blico');
  });

  test('üîë Login Flow - Proceso completo de login debe funcionar', async ({ page }) => {
    console.log('üîç Probando flujo completo de login...');
    
    await page.goto(`${FRONTEND_URL}/login`);
    
    // Llenar formulario de login
    await page.fill('input[name="username"], input[type="text"]', 'admin');
    await page.fill('input[name="password"], input[type="password"]', 'admin123');
    
    console.log('üìù Formulario de login llenado');
    
    // Capturar respuestas de la red para debugging
    const responsePromise = page.waitForResponse(response => 
      response.url().includes('/auth/login') && response.status() === 200
    );
    
    // Hacer click en submit
    await page.click('button[type="submit"], button:has-text("Ingresar")');
    
    console.log('üñ±Ô∏è Click en bot√≥n de login');
    
    try {
      // Esperar respuesta exitosa del backend
      const response = await responsePromise;
      console.log('‚úÖ Login response status:', response.status());
      
      // Verificar redirecci√≥n al dashboard
      await expect(page).toHaveURL(/home|dashboard/);
      
      // Verificar que aparezca la navbar autenticada usando selectores m√°s espec√≠ficos
      await expect(page.locator('nav a[href="/admin"]')).toBeVisible({ timeout: 10000 });

      console.log('‚úÖ Login exitoso, usuario redirigido al dashboard');
      
    } catch (error) {
      console.log('‚ùå Error en login:', error.message);
      
      // Capturar screenshot para debugging
      await page.screenshot({ path: 'test-results/login-error.png' });
      
      // Verificar si hay mensajes de error en la UI
      const errorMessage = page.locator('text=Error, text=error, .error, .alert-danger');
      if (await errorMessage.isVisible()) {
        const errorText = await errorMessage.textContent();
        console.log('üö® Error en UI:', errorText);
      }
      
      throw error;
    }
  });

  test('üë• Navigation - Navegaci√≥n debe funcionar seg√∫n el rol del usuario', async ({ page }) => {
    console.log('üîç Probando navegaci√≥n despu√©s de login...');
    
    // Hacer login primero
    await page.goto(`${FRONTEND_URL}/login`);
    await page.fill('input[name="username"], input[type="text"]', 'admin');
    await page.fill('input[name="password"], input[type="password"]', 'admin123');
    await page.click('button[type="submit"], button:has-text("Ingresar")');
    
    // Esperar a que aparezca la navbar
    await expect(page.locator('nav')).toBeVisible({ timeout: 10000 });
    
    // Verificar que aparezcan los elementos de navegaci√≥n para admin usando selectores espec√≠ficos
    await expect(page.locator('nav a[href="/"]')).toBeVisible(); // Inicio
    await expect(page.locator('nav a[href="/catalog"]')).toBeVisible(); // Cat√°logo
    await expect(page.locator('nav a[href="/admin"]')).toBeVisible(); // Admin

    console.log('‚úÖ Navegaci√≥n cargada correctamente para admin');

    // Probar navegaci√≥n a diferentes secciones
    await page.click('nav a[href="/admin"]');
    await expect(page).toHaveURL(/admin/);

    console.log('‚úÖ Navegaci√≥n a Admin exitosa');
  });

  test('üîÑ User Creation - Creaci√≥n de usuarios via API debe funcionar', async ({ page, request }) => {
    console.log('üîç Probando creaci√≥n de usuario via API...');

    const timestamp = Date.now();
    const userData = {
      username: `testuser_${timestamp}`,
      email: `test_${timestamp}@example.com`,
      password: 'password123',
      full_name: 'Test User Playwright'
    };

    // Crear usuario via API
    const response = await request.post(`${FRONTEND_URL}/api/v1/auth/register`, {
      data: userData
    });

    expect(response.status()).toBe(201);

    const data = await response.json();
    expect(data.username).toBe(userData.username);
    expect(data.email).toBe(userData.email);

    console.log('‚úÖ Usuario creado exitosamente via API');
  });

  test('üö™ Logout Flow - Proceso de logout debe funcionar', async ({ page }) => {
    console.log('üîç Probando flujo de logout...');

    // Hacer login primero
    await page.goto(`${FRONTEND_URL}/login`);
    await page.fill('input[name="username"], input[type="text"]', 'admin');
    await page.fill('input[name="password"], input[type="password"]', 'admin123');
    await page.click('button[type="submit"]');

    // Esperar a estar logueado
    await expect(page.locator('nav a[href="/admin"]')).toBeVisible({ timeout: 10000 });

    // Buscar y hacer click en el bot√≥n de logout
    const logoutButton = page.locator('button:has-text("Cerrar"), button:has-text("Logout"), [data-testid="logout"]');
    if (await logoutButton.isVisible()) {
      await logoutButton.click();
    } else {
      // Intentar con el men√∫ de usuario si existe
      const userMenu = page.locator('[data-testid="user-menu"], .user-menu, .dropdown');
      if (await userMenu.isVisible()) {
        await userMenu.click();
        await page.click('text=Cerrar Sesi√≥n');
      } else {
        console.log('‚ö†Ô∏è Bot√≥n de logout no encontrado');
      }
    }

    // Verificar que se redirige a login
    await expect(page).toHaveURL(/login/);

    console.log('‚úÖ Logout exitoso');
  });

  test('üì± Responsive Design - UI debe funcionar en dispositivos m√≥viles', async ({ page }) => {
    console.log('üîç Probando dise√±o responsive...');

    // Configurar viewport m√≥vil
    await page.setViewportSize({ width: 375, height: 667 });

    await page.goto(FRONTEND_URL);

    // La aplicaci√≥n redirige a login, verificar que funciona en m√≥vil
    await page.waitForURL('**/login');
    await expect(page.locator('h2').filter({ hasText: 'Iniciar Sesi√≥n' })).toBeVisible();

    console.log('‚úÖ Dise√±o responsive verificado');
  });
});