services:
  db:
    image: pgvector/pgvector:pg15
    environment:
      POSTGRES_DB: seace_db
      POSTGRES_USER: seace_user
      POSTGRES_PASSWORD: seace_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./migrate-recomendaciones.sql:/docker-entrypoint-initdb.d/02-migrate.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U seace_user -d seace_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend-nodejs:
    build:
      context: ./backend-nodejs
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=8000
      - HOST=0.0.0.0
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=seace_db
      - DB_USER=seace_user
      - DB_PASSWORD=seace_password
      - JWT_SECRET=LbOHQwNGLKvz7gOxckWe8XoTdsarw4n7DBFAJGLw7Js
      - JWT_EXPIRES_IN=24h
      - CORS_ORIGIN=http://localhost:3000
      - LOG_LEVEL=info
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - CHROME_BIN=/usr/bin/chromium-browser
      - SCRAPING_TIMEOUT=60000
      - SCRAPING_MAX_RETRIES=3
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - backend_logs:/app/logs
      - /app/node_modules
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://127.0.0.1:8000/api/v1/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:80"
    environment:
      - VITE_API_URL=http://localhost:8000
      - NODE_ENV=production
    depends_on:
      backend-nodejs:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

volumes:
  postgres_data:
  backend_logs: